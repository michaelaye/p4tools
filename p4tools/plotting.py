# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/02_plotting.ipynb.

# %% auto 0
__all__ = ['plot_blotches_for_tile', 'plot_fans_for_tile', 'plot_original_tile', 'plot_original_and_fans',
           'plot_original_and_blotches', 'plot_original_fans_blotches', 'plot_x_random_tiles_with_n_fans']

# %% ../notebooks/02_plotting.ipynb 2
from matplotlib import pyplot as plt

from . import io, markings

# %% ../notebooks/02_plotting.ipynb 3
def plot_blotches_for_tile(tile_id, ax=None, **plot_kwargs):
    tile_blotches = io.get_blotches_for_tile(tile_id)
    if ax is None:
        _, ax = plt.subplots()
    for _, blotch in tile_blotches.iterrows():
        m = markings.Blotch(blotch, with_center=False)
        m.plot(ax=ax, **plot_kwargs)

# %% ../notebooks/02_plotting.ipynb 6
def plot_fans_for_tile(tile_id, ax=None, **plot_kwargs):
    tile_fans = io.get_fans_for_tile(tile_id)
    if len(tile_fans) == 0:
        print("Warning: No fans found.")
    if ax is None:
        _, ax = plt.subplots()
    for _, fan in tile_fans.iterrows():
        m = markings.Fan(fan, with_center=False)
        m.plot(ax=ax, **plot_kwargs)

# %% ../notebooks/02_plotting.ipynb 9
def plot_original_tile(tileID, ax=None):
    if ax is None:
        _, ax = plt.subplots()
    ax.imshow(io.get_subframe_by_tile_id(tileID), origin="upper", aspect="auto")
    ax.set_axis_off()

# %% ../notebooks/02_plotting.ipynb 11
def plot_original_and_fans(tileID):
    fig, axes = plt.subplots(ncols=2, figsize=(9, 3))
    plot_original_tile(tileID, ax=axes[0])
    plot_fans_for_tile(tileID, ax=axes[1])
    fig.suptitle(f"Planet Four tile ID: {tileID}")

# %% ../notebooks/02_plotting.ipynb 13
def plot_original_and_blotches(tileID):
    fig, axes = plt.subplots(ncols=2, figsize=(9, 3))
    plot_original_tile(tileID, ax=axes[0])
    plot_blotches_for_tile(tileID, ax=axes[1], color="magenta")
    fig.suptitle(f"Planet Four tile ID: {tileID}")

# %% ../notebooks/02_plotting.ipynb 15
def plot_original_fans_blotches(tileID, save=False):
    fig, axes = plt.subplots(ncols=2, figsize=(9, 3))
    plot_original_tile(tileID, ax=axes[0])
    plot_fans_for_tile(tileID, ax=axes[1])
    plot_blotches_for_tile(tileID, ax=axes[1], color="magenta")
    fig.suptitle(f"Planet Four tile ID: {tileID}")
    if save:
        fig.savefig(f"{tileID}.png", dpi=150)

# %% ../notebooks/02_plotting.ipynb 18
def plot_x_random_tiles_with_n_fans(
    x: int = 3,  # how many of 2 col original+p4 data plots to receive 
    n: int = 15,  # whats the minimum number of fans to contain
    save:
    bool = False,  # if True, saves a PNG with the plot for each tile_id separately
    random_state: int = None  # can be set to recreate the exact same set
):
    fans = io.get_fan_catalog()
    blotches = io.get_blotch_catalog()
    # for the fan tiles that have blotches, how many fans are in:
    n_fans = fans[fans.tile_id.isin(blotches.tile_id)].groupby("tile_id").size()
    tile_ids = n_fans[n_fans >= n].sample(x, random_state=random_state).index
    for tile_id in tile_ids:
        plot_original_fans_blotches(tile_id, save=save)
